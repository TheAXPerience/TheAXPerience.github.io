{"version":3,"sources":["js/questions.js","js/textbox.js","App.js","serviceWorker.js","index.js"],"names":["toPortrait","str","s","toLowerCase","Question","q","as","this","question","answers","i","length","push","text","points","arr","foundAll","forEach","found","a","includes","ret","QuestionList","questions","jsonObject","jsonArray","$this","addQuestion","index","Math","floor","random","splice","Natures","gender","counts","flavor","pokemon","name","he","she","they","n","addNature","max","maxScore","Object","keys","key","nature","split","element","undefined","sumCount","curr","round","sort","b","count","TextBox","props","state","left","q_list","n_list","loading","handleClick","bind","fetch","then","response","json","jsonData","addNatures","personalities","addQuestions","setState","e","addCounts","target","dataset","value","console","log","hasNext","tmp","id","get_q","getNext","getAnswers","map","data_value","txt","data-value","onClick","className","getLastQuestion","natures","React","Component","ResultsScreen","getNature","getAllCounts","src","picture","alt","percent","Begin","ReactDOM","render","document","getElementById","App","type","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4fc6a866.chunk.js","sourcesContent":["export function toPortrait(str) {\r\n  const s = str.toLowerCase();\r\n  return `./assets/${s}_portrait.png`;\r\n}\r\n\r\nexport class Question {\r\n  constructor(q, as) {\r\n    // q : string = question text\r\n    // as : json array of json objects = answer text and points\r\n    this.question = q;\r\n    this.answers = [];\r\n\r\n    for (let i = 0; i < as.length; i++) {\r\n      this.answers.push({\r\n        \"text\": as[i].text,\r\n        \"points\": as[i].points});\r\n    }\r\n  }\r\n\r\n  get q() {\r\n    return this.question;\r\n  }\r\n\r\n  containsNatures(arr) {\r\n    let foundAll = true;\r\n    arr.forEach(s => {\r\n      // for each s in arr\r\n      let found = false;\r\n      this.answers.forEach(a => {\r\n        found |= a.points.includes(s);\r\n      });\r\n      foundAll &= found;\r\n    });\r\n    return foundAll;\r\n  }\r\n\r\n  getAnswers() {\r\n    const ret = [];\r\n    this.answers.forEach(a => {\r\n      ret.push(a);\r\n    });\r\n    return ret;\r\n  }\r\n\r\n  getNumAnswers() {\r\n    return this.answers.length;\r\n  }\r\n}\r\n\r\nexport class QuestionList {\r\n  constructor() {\r\n    this.questions = [];\r\n  }\r\n\r\n  addQuestion(jsonObject) {\r\n    this.questions.push(new Question(jsonObject.q, jsonObject.as));\r\n  }\r\n\r\n  addQuestions(jsonArray) {\r\n    // from json array:\r\n    // 2. convert to Question (class above)\r\n    // 3. add final question\r\n    const $this = this;\r\n    jsonArray.forEach(jsonObject => {\r\n      $this.addQuestion(jsonObject);\r\n    });\r\n  }\r\n\r\n  getNext() {\r\n    if (this.questions.length <= 0) {\r\n      return null;\r\n    }\r\n    const index = Math.floor(Math.random() * this.questions.length);\r\n    const ret = this.questions.splice(index, 1);\r\n    return ret[0];\r\n  }\r\n\r\n  hasNext() {\r\n    return this.questions.length > 0;\r\n  }\r\n\r\n  getLastQuestion() {\r\n    // will always return the same final question\r\n    return new Question('Select your preferred pronouns.', [\r\n      {'text': 'He/him', 'points': 'he'},\r\n      {'text': 'She/her', 'points': 'she'},\r\n      {'text': 'They/them', 'points': 'they'}\r\n    ]);\r\n  }\r\n}\r\n\r\nexport class Natures {\r\n  constructor() {\r\n    this.gender = 'he'; // default\r\n    this.counts = {};\r\n    this.flavor = {};\r\n    this.pokemon = {};\r\n  }\r\n\r\n  addNature(jsonObject) {\r\n    // for each nature:\r\n    // 1. add count = 0\r\n    // 2. add object relating pronoun to Pokemon\r\n    // 3. add flavor text\r\n    const name = jsonObject.name;\r\n    this.counts[name] = 0;\r\n    this.flavor[name] = jsonObject.flavor;\r\n    this.pokemon[name] = {\r\n      \"he\": jsonObject.he,\r\n      \"she\": jsonObject.she,\r\n      \"they\": jsonObject.they\r\n    };\r\n  }\r\n\r\n  addNatures(jsonArray) {\r\n    const $this = this;\r\n    jsonArray.forEach(function(n) {\r\n      $this.addNature(n);\r\n    });\r\n  }\r\n\r\n  getNature() {\r\n    // 1. find highest count (ties == coin flip or something)\r\n    // 2. return nature, pokemon, and the flavor text\r\n    let max = []\r\n    let maxScore = -1;\r\n    Object.keys(this.counts).forEach(key => {\r\n      // console.log(key + \" : \" + this.counts[key]);\r\n      if (this.counts[key] > maxScore) {\r\n        max = [key];\r\n        maxScore = this.counts[key];\r\n      } else if (this.counts[key] === maxScore) {\r\n        max.push(key);\r\n      }\r\n    });\r\n\r\n    const nature = max[Math.floor(Math.random() * max.length)];\r\n    return {\r\n      \"nature\": nature,\r\n      \"pokemon\": this.pokemon[nature][this.gender],\r\n      \"flavor\": this.flavor[nature]\r\n    }\r\n  }\r\n\r\n  addCounts(str) {\r\n    // str = space-separated list of natures to increment\r\n    // 1. split by \" \"\r\n    // 2. for each element, increment the related count\r\n    const s = str.split(' ');\r\n    s.forEach(element => {\r\n      if (this.counts[element] === undefined && element.length > 0) {\r\n        this.gender = element;\r\n      } else if (element.length > 0){\r\n        this.counts[element] += 1;\r\n      }\r\n    });\r\n  }\r\n\r\n  resetCounts() {\r\n    Object.keys(this.counts).forEach(key => {\r\n      this.counts[key] = 0;\r\n    });\r\n    this.gender = 'he';\r\n  }\r\n\r\n  getAllCounts() {\r\n    // return counts in an array (each containing an object of 3) in sorted order\r\n    const ret = [];\r\n    let sumCount = 0;\r\n    Object.keys(this.counts).forEach(key => {\r\n      sumCount += this.counts[key];\r\n    });\r\n    Object.keys(this.counts).forEach(key => {\r\n      let curr = {\r\n        'nature': key,\r\n        'picture': toPortrait(this.pokemon[key][this.gender]),\r\n        'count': this.counts[key],\r\n        'percent': Math.round(100 * (this.counts[key] / sumCount))\r\n      }\r\n      ret.push(curr);\r\n    });\r\n\r\n    // sort\r\n    ret.sort(function(a,b) {\r\n      return b.count - a.count;\r\n    })\r\n    return ret;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport {toPortrait, QuestionList, Natures} from './questions.js';\r\n\r\nexport class TextBox extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      left: Math.floor(Math.random() * 3) + 8,\r\n      q_list: null,\r\n      n_list: null,\r\n      loading: true\r\n    };\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const n = new Natures();\r\n    const q = new QuestionList();\r\n    fetch('./assets/mysterydungeonquiz.json')\r\n      .then(response => response.json())\r\n      .then((jsonData) => {\r\n        n.addNatures(jsonData.personalities);\r\n        q.addQuestions(jsonData.questions);\r\n        this.setState({\r\n          left: this.state.left,\r\n          q_list: q,\r\n          n_list: n,\r\n          loading: false\r\n        });\r\n      });\r\n  }\r\n\r\n  handleClick(e) {\r\n    this.state.n_list.addCounts(e.target.dataset.value);\r\n    console.log(e.target.dataset.value);\r\n\r\n    if (this.state.q_list.hasNext()) {\r\n      const tmp = this.state.left - 1;\r\n      this.setState({\r\n        left: tmp,\r\n        q_list: this.state.q_list,\r\n        n_list: this.state.n_list,\r\n        loading: false\r\n      });\r\n    } else {\r\n      this.setState({\r\n        left: 0,\r\n        q_list: this.state.q_list,\r\n        n_list: this.state.n_list,\r\n        loading: false\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this.state.loading) {\r\n      return <div id=\"text-box\">Loading...</div>;\r\n    }\r\n\r\n    const handleClick = this.handleClick;\r\n    if (this.state.left > 0) {\r\n      // get question from questions_list\r\n      const get_q = this.state.q_list.getNext();\r\n      let i = 1;\r\n      let answers = get_q.getAnswers().map(function(a) {\r\n        const data_value = a.points;\r\n        const txt = a.text;\r\n        return <div key={'a' + i++} data-value={data_value} onClick={e => handleClick(e, \"data-value\")}>{txt}</div>;\r\n      });\r\n      return (\r\n        <div id=\"text-box\">\r\n          <div className=\"question\">\r\n            <h2>\r\n              { get_q.q }\r\n            </h2>\r\n            </div>\r\n          <div className=\"answers\">\r\n            {answers}\r\n          </div>\r\n        </div>);\r\n    } else if (this.state.left === 0) {\r\n      // get Last Question from questions_list\r\n      const get_q = this.state.q_list.getLastQuestion();\r\n      let i = 1;\r\n      let answers = get_q.getAnswers().map(function(a) {\r\n        const data_value = a.points;\r\n        const txt = a.text;\r\n        return <div key={'a' + i++} data-value={data_value} onClick={e => handleClick(e, \"data-value\")}>{txt}</div>;\r\n      });\r\n      return (\r\n        <div id=\"text-box\">\r\n          <div className=\"question\">\r\n            <h2>\r\n              { get_q.q }\r\n            </h2>\r\n            </div>\r\n          <div className=\"answers\">\r\n            {answers}\r\n          </div>\r\n        </div>);\r\n    } else {\r\n      // show results screen\r\n      return <ResultsScreen natures={this.state.n_list}/>;\r\n    }\r\n  }\r\n}\r\n\r\nclass ResultsScreen extends React.Component {\r\n  render() {\r\n    let i = 1;\r\n    const n = this.props.natures.getNature();\r\n    const counts = this.props.natures.getAllCounts().map(function(n) {\r\n      return (\r\n        <tr key={'n' + i++}>\r\n          <td>{n.nature}</td>\r\n          <td><img src={n.picture} alt={n.nature}/></td>\r\n          <td>{n.count} ({n.percent})</td>\r\n        </tr>\r\n      );\r\n    });\r\n    return (\r\n      <div id=\"text-box\">\r\n      <h2>\r\n        You seem to be... the {n.nature} type!\r\n      </h2>\r\n      <p>\r\n        {n.flavor}<br/><br/>\r\n        <img id=\"portrait\" src={toPortrait(n.pokemon)} alt={n.pokemon} /><br/>\r\n        Will be a <span className=\"player\">{n.pokemon}</span>!\r\n      </p>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Nature</th>\r\n            <th>Portrait</th>\r\n            <th>Points</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {counts}\r\n        </tbody>\r\n      </table>\r\n    </div>);\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { TextBox } from './js/textbox.js'\nimport './App.css'\n\nfunction Begin() {\n  // function that is called to begin the process\n  // first, must load questions from json file\n  // second, must generate random number from 8 to 10\n  // third, create a React.Component class that manages the text-box (another js file)\n  // fourth, create a React.Component class that shows the result screen (another js file)\n  // readJSON();\n  ReactDOM.render(<TextBox />,\n    document.getElementById('root')\n  );\n}\n\nfunction App() {\n  return (\n    <div id=\"text-box\">\n      <h2>\n        Welcome!<br/>\n        This is the portal that leads to the world inhabited only by Pokemon.<br/>\n        Beyond this gateway, many new adventures and fresh experiences await your arrival!<br/>\n        Before you depart for adventure, you must answer some questions.<br/>\n        Be truthful when you answer them!<br/>\n        Now, are you ready?<br/>\n        Then...\n      </h2>\n      <button type=\"button\" name=\"button\" onClick={Begin}>Let the questions begin!</button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}